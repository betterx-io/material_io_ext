import 'dart:ui';
import 'package:flutter/material.dart';

/// Extension on [String] that allows to easily convert a string to a Typography Text [Widget].
extension Typography on String {
  Widget text(BuildContext context) => Text(this);

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline1].
  Widget headline1(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.headline1,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline1] with Copywith [TextStyle].
  Widget headline1Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.headline1?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline2].
  Widget headline2(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.headline2,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline2] with Copywith [TextStyle].
  Widget headline2Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.headline2?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline3].
  Widget headline3(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.headline3,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline3] with Copywith [TextStyle].
  Widget headline3Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.headline3?.copyWith(
            inherit: inherit,
            color: color,
            backgroundColor: backgroundColor,
            fontSize: fontSize,
            fontWeight: fontWeight,
            fontStyle: fontStyle,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            textBaseline: textBaseline,
            height: height,
            leadingDistribution: leadingDistribution,
            locale: locale,
            foreground: foreground,
            background: background,
            shadows: shadows,
            fontFeatures: fontFeatures,
            decoration: decoration,
            decorationColor: decorationColor,
            decorationStyle: decorationStyle,
            decorationThickness: decorationThickness,
            debugLabel: debugLabel,
            fontFamily: fontFamily,
            fontFamilyFallback: fontFamilyFallback,
            package: package,
            overflow: overflow),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline4].
  Widget headline4(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.headline4,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline4] with Copywith [TextStyle].
  Widget headline4Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.headline4?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline5].
  Widget headline5(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.headline5,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline5] with Copywith [TextStyle].
  Widget headline5Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.headline5?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline6].
  Widget headline6(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.headline6,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.headline6] with Copywith [TextStyle].
  Widget headline6Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.headline6?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.subtitle1].
  Widget subtitle1(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.subtitle1,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.subtitle1] with Copywith [TextStyle].
  Widget subtitle1Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.subtitle1?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.subtitle2].
  Widget subtitle2(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.subtitle2,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.subtitle2] with Copywith [TextStyle].
  Widget subtitle2Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.subtitle2?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.bodyText1].
  Widget bodyText1(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.bodyText1,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.bodyText1] with Copywith [TextStyle].
  Widget bodyText1Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.bodyText1?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.bodyText2].
  Widget bodyText2(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.bodyText2,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.bodyText2] with Copywith [TextStyle].
  Widget bodyText2Custom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.bodyText2?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.caption].
  Widget caption(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.caption,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.caption] with Copywith [TextStyle].
  Widget captionCustom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.caption?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.button].
  Widget button(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.button,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.button] with Copywith [TextStyle].
  Widget buttonCustom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.button?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.overline].
  Widget overline(BuildContext context,
          {Key? key,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        key: key,
        style: Theme.of(context).textTheme.overline,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );

  /// [String] to a [Text] widget with the [TextStyle] set to [Typography.overline] with Copywith [TextStyle].
  Widget overlineCustom(BuildContext context,
          {Key? key,
          bool inherit = true,
          Color? color,
          Color? backgroundColor,
          double? fontSize,
          FontWeight? fontWeight,
          FontStyle? fontStyle,
          double? letterSpacing,
          double? wordSpacing,
          TextBaseline? textBaseline,
          double? height,
          TextLeadingDistribution? leadingDistribution,
          Paint? foreground,
          Paint? background,
          List<Shadow>? shadows,
          List<FontFeature>? fontFeatures,
          TextDecoration? decoration,
          Color? decorationColor,
          TextDecorationStyle? decorationStyle,
          double? decorationThickness,
          String? debugLabel,
          String? fontFamily,
          List<String>? fontFamilyFallback,
          String? package,
          StrutStyle? strutStyle,
          TextAlign? textAlign,
          TextDirection? textDirection,
          Locale? locale,
          bool? softWrap,
          TextOverflow? overflow,
          double? textScaleFactor,
          int? maxLines,
          String? semanticsLabel,
          TextWidthBasis? textWidthBasis,
          TextHeightBehavior? textHeightBehavior}) =>
      Text(
        this,
        style: Theme.of(context).textTheme.overline?.copyWith(
              inherit: inherit,
              color: color,
              backgroundColor: backgroundColor,
              fontSize: fontSize,
              fontWeight: fontWeight,
              fontStyle: fontStyle,
              letterSpacing: letterSpacing,
              wordSpacing: wordSpacing,
              textBaseline: textBaseline,
              height: height,
              leadingDistribution: leadingDistribution,
              locale: locale,
              foreground: foreground,
              background: background,
              shadows: shadows,
              fontFeatures: fontFeatures,
              decoration: decoration,
              decorationColor: decorationColor,
              decorationStyle: decorationStyle,
              decorationThickness: decorationThickness,
              debugLabel: debugLabel,
              fontFamily: fontFamily,
              fontFamilyFallback: fontFamilyFallback,
              package: package,
              overflow: overflow,
            ),
        key: key,
        strutStyle: strutStyle,
        textAlign: textAlign,
        textDirection: textDirection,
        locale: locale,
        softWrap: softWrap,
        overflow: overflow,
        textScaleFactor: textScaleFactor,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
      );
}
